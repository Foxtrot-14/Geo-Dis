import{fQ as m,fR as c,fS as f,fT as I,V as p,fU as L,fV as D,br as d,ab as S,fW as v,cf as h,fX as k,J as b,a4 as g,a3 as F,dO as T,a5 as U,a6 as V,fY as W,fZ as z,f_ as E,f$ as P}from"./index-xbq7LRAl.js";import{S as j,u as J,c as O}from"./defaults-zmeSXTBk.js";import{e as Q,i as R}from"./defaultsJSON-GKolV7NZ.js";m.fromSimpleMarkerSymbol(j);c.fromSimpleLineSymbol(J);f.fromSimpleFillSymbol(O);new I({symbolLayers:new p([new L({material:{color:Q},edges:new D({size:d(1),color:new S(R)})})])});const X=new c({symbolLayers:new p([new v({material:{color:new S([0,0,0])},size:d(1)})])}),Y=new f({symbolLayers:new p([new L({outline:{color:new S([0,0,0]),size:d(1)}})])}),a={retainId:!1,ignoreDrivers:!1,hasLabelingContext:!0};function Z(e,o=a){var w,u,$,C;if(!e)return{symbol:null};const{retainId:i=a.retainId,ignoreDrivers:s=a.ignoreDrivers,hasLabelingContext:l=a.hasLabelingContext,retainCIM:t=a.retainCIM,cimFallbackEnabled:r=a.cimFallbackEnabled}=o;let n=null;if(h(e)||e instanceof k)n=e.clone();else if(e.type==="cim"){const y=(u=(w=e.data)==null?void 0:w.symbol)==null?void 0:u.type;switch(y){case"CIMPointSymbol":n=t?e.clone():m.fromCIMSymbol(e);break;case"CIMLineSymbol":r&&(n=X.clone(),($=o==null?void 0:o.logWarning)==null||$.call(o,"Unsupported CIM line symbology converted to fallback 3D line symbology"));break;case"CIMPolygonSymbol":r&&(n=Y.clone(),(C=o==null?void 0:o.logWarning)==null||C.call(o,"Unsupported CIM polygon symbology converted to fallback 3D polygon symbology"))}if(!n)return{error:new b("symbol-conversion:unsupported-cim-symbol",`CIM symbol of type '${y||"unknown"}' is unsupported in 3D`,{symbol:e})}}else if(e instanceof g)n=c.fromSimpleLineSymbol(e);else if(e instanceof F)n=m.fromSimpleMarkerSymbol(e);else if(e instanceof T)n=m.fromPictureMarkerSymbol(e);else if(e instanceof U)n=o.geometryType&&o.geometryType==="mesh"?I.fromSimpleFillSymbol(e):f.fromSimpleFillSymbol(e);else{if(!(e instanceof V))return{error:new b("symbol-conversion:unsupported-2d-symbol",`2D symbol of type '${e.type||e.declaredClass}' is unsupported in 3D`,{symbol:e})};n=l?W.fromTextSymbol(e):m.fromTextSymbol(e)}return i&&n&&n.type!=="cim"&&(n.id=e.id),s&&h(n)&&n.symbolLayers.forEach(y=>y.ignoreDrivers=!0),{symbol:n}}function B(e,o,i,s){const l=x(e,{},{context:s,isLabelSymbol:!1});l!=null&&(o[i]=l)}function G(e,o,i,s){const l=x(e,{},{context:s,isLabelSymbol:!0});l!=null&&(o[i]=l)}function M(e){return e instanceof P||e instanceof k}function x(e,o,i){if(e==null)return null;const{context:s,isLabelSymbol:l}=i,t=s==null?void 0:s.origin,r=s==null?void 0:s.messages;if(t==="web-scene"&&!M(e)){const n=Z(e,{retainCIM:!0,hasLabelingContext:l});return n.symbol!=null?n.symbol.write(o,s):(r==null||r.push(new b("symbol:unsupported",`Symbols of type '${e.declaredClass}' are not supported in scenes. Use 3D symbology instead when working with WebScene and SceneView`,{symbol:e,context:s,error:n.error})),null)}return(t==="web-map"||t==="portal-item"&&!E(s==null?void 0:s.layer))&&M(e)?(r==null||r.push(new b("symbol:unsupported",`Symbols of type '${e.declaredClass}' are not supported in web maps and portal items. Use 2D symbology and CIMSymbol instead when working with MapView`,{symbol:e,context:s})),null):e.write(o,s)}function H(e,o){return z(e,null,o)}export{H as b,G as i,B as l};
