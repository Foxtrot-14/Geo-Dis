import{b1 as p,J as s,aY as i}from"./index-xbq7LRAl.js";import{l as n}from"./MeshVertexAttributes-Tvi6VCHy.js";import{M as a}from"./vertexSpaceConversion-BQZHqAYK.js";import"./mat3f64-q3fE-ZOt.js";import"./mat4f64-CSKppSlJ.js";import"./spatialReferenceEllipsoidUtils-CaeX7-gN.js";import"./computeTranslationToOriginAndRotation-BWwWh-hw.js";import"./meshVertexSpaceUtils-Bra8koGT.js";import"./MeshLocalVertexSpace-DeVlduu8.js";import"./vec3-sB3fQDRZ.js";import"./projection-CtZEOrJO.js";import"./DoubleArray-CXJrgvyQ.js";import"./BufferView-D_ggF0Y2.js";import"./vec42-Dmy7JOK8.js";import"./vec4-DAIEsp7_.js";async function j(t,r,m){await Promise.resolve(),p(m);const o=a(t,r);if(!o)throw new s("meshUtils:convertVertexSpace()","Failed to convert to provided vertex space due to projection errors");const e=t.cloneAndModifyVertexAttributes(new n({...o,uv:i(t.vertexAttributes.uv),color:i(t.vertexAttributes.color)}),r);return e.transform=null,e}export{j as convertMeshVertexSpace};
